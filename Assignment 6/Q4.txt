//Checking palindrome or not

#include <iostream>
using namespace std;

class node{
    public:
    char data;
    node* next;
    node* prev;
};

class dll{
    private:
    node *head;
    public:
    dll(){
        head=NULL;
    }
    void insert(char val);
    void isPalindrome();
    void display();
};

void dll::insert(char val) {
    node* newNode=new node;
    newNode->data=val;
    newNode->next=NULL;
    newNode->prev=NULL;
    if(head==NULL){
        head = newNode;
    }
    else{
        node* temp=head;
        while(temp->next!=NULL){
            temp = temp->next;
        }
    temp->next=newNode;
    newNode->prev=temp;
    }
}

void dll::isPalindrome(){
    if (head==NULL) {
        cout<<"empty"<<endl;
        return;
    }
    int flag=0;
    node* p=head;
    node* q=head;
    while(q->next!=NULL){
        q = q->next;
    }
    while(p!=q && q->next!=p){
        if (p->data!=q->data){
            flag=1;
        }
        p=p->next;
        q=q->prev;
    }
    if(flag==1){
        cout<<"Not a palindrome"<<endl;
    }
    else{
        cout<<"palindrome"<<endl;
    }
        
}

void dll::display(){
    if(head==NULL){
        cout<<"empty"<<endl;
        return;
    }
    node* temp=head;
    while(temp!=NULL){
        cout<<temp->data;
        temp=temp->next;
    }
    cout<<endl;
}

int main(){
    dll d;
    
    d.insert('M');
    d.insert('A');
    d.insert('D');
    d.insert('A');
    d.insert('M');
    
    d.display();
    
    d.isPalindrome();
    return 0;
}

