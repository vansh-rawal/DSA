// Menu Program

#include <iostream>
using namespace std;

struct node{
    int data;
    node* next;
}*head=NULL;

void insertAtBeginning(int val){
    node* newNode=new node;
    newNode->data=val;
    newNode->next=head;
    head=newNode;
    cout<<"Inserted value at beginning:"<<val<<endl;
}

void insertAtEnd(int val){
    node* newNode=new node;
    newNode->data=val;
    newNode->next=NULL;
    if(head==NULL){
        head=newNode;
    }else{
        node* temp=head;
        while(temp->next!=NULL){
            temp=temp->next;
        }
        temp->next=newNode;
    }
    cout<<"Inserted value at end:"<<val<<endl;
}

void insertBeforeValue(int val,int target){
    if(head==NULL){
        cout<<"List is empty"<<endl;
        return;
    }
    if(head->data==target){
        insertAtBeginning(val);
        return;
    }
    node* temp=head;
    while(temp->next!=NULL && temp->next->data!=target){
        temp=temp->next;
    }
    if(temp->next==NULL){
        cout<<"Target not found"<<endl;
    }else{
        node* newNode=new node;
        newNode->data=val;
        newNode->next=temp->next;
        temp->next=newNode;
        cout<<"Inserted "<<val<<" before "<<target<<endl;
    }
}

void insertAfterValue(int val,int target){
    node* temp=head;
    while(temp!=NULL && temp->data!=target){
        temp=temp->next;
    }
    if(temp==NULL){
        cout<<"Target not found"<<endl;
    }else{
        node* newNode=new node;
        newNode->data=val;
        newNode->next=temp->next;
        temp->next=newNode;
        cout<<"Inserted "<<val<<" after "<<target<<endl;
    }
}

void deleteFromBeginning(){
    if(head==NULL){
        cout<<"List is empty"<<endl;
    }else{
        node* temp=head;
        head=head->next;
        cout<<"Deleted value from beginning:"<<temp->data<<endl;
        delete temp;
    }
}

void deleteFromEnd(){
    if(head==NULL){
        cout<<"List is empty"<<endl;
    }else if(head->next==NULL){
        cout<<"Deleted value from end:"<<head->data<<endl;
        delete head;
        head=NULL;
    }else{
        node* temp=head;
        while(temp->next->next!=NULL){
            temp=temp->next;
        }
        cout<<"Deleted value from end:"<<temp->next->data<<endl;
        delete temp->next;
        temp->next=NULL;
    }
}

void deleteSpecific(int val){
    if(head==NULL){
        cout<<"List is empty"<<endl;
        return;
    }
    if(head->data==val){
        node* temp=head;
        head=head->next;
        cout<<"Deleted node value:"<<val<<endl;
        delete temp;
        return;
    }
    node* temp=head;
    while(temp->next!=NULL && temp->next->data!=val){
        temp=temp->next;
    }
    if(temp->next==NULL){
        cout<<"Node not found"<<endl;
    }else{
        node* del=temp->next;
        temp->next=temp->next->next;
        cout<<"Deleted node value:"<<val<<endl;
        delete del;
    }
}

void search(int val){
    node* temp=head;
    int pos=1;
    while(temp!=NULL){
        if(temp->data==val){
            cout<<"Found "<<val<<" at position "<<pos<<endl;
            return;
        }
        temp=temp->next;
        pos++;
    }
    cout<<"Node not found"<<endl;
}

void display(){
    if(head==NULL){
        cout<<"List is empty"<<endl;
    }else{
        cout<<"List:";
        node* temp=head;
        while(temp!=NULL){
            cout<<temp->data<<"->";
            temp=temp->next;
        }
        cout<<"NULL";
        cout<<endl;
    }
}

int main(){
    int ch,val,target;
    do{
        cout<<"\n--- Singly Linked List Menu ---"<<endl;
        cout<<"1.Insert at beginning"<<endl;
        cout<<"2.Insert at end"<<endl;
        cout<<"3.Insert before a value"<<endl;
        cout<<"4.Insert after a value"<<endl;
        cout<<"5.Delete from beginning"<<endl;
        cout<<"6.Delete from end"<<endl;
        cout<<"7.Delete specific node"<<endl;
        cout<<"8.Search a node"<<endl;
        cout<<"9.Display all nodes"<<endl;
        cout<<"10.Exit"<<endl;
        cout<<"Enter choice:";
        cin>>ch;

        switch(ch){
            case 1:{
                cout<<"Enter value:";
                cin>>val;
                insertAtBeginning(val);
                break;
            }
            case 2:{
                cout<<"Enter value:";
                cin>>val;
                insertAtEnd(val);
                break;
            }
            case 3:{
                cout<<"Enter value to insert:";
                cin>>val;
                cout<<"Enter target value:";
                cin>>target;
                insertBeforeValue(val,target);
                break;
            }
            case 4:{
                cout<<"Enter value to insert:";
                cin>>val;
                cout<<"Enter target value:";
                cin>>target;
                insertAfterValue(val,target);
                break;
            }
            case 5:{
                deleteFromBeginning();
                break;
            }
            case 6:{
                deleteFromEnd();
                break;
            }
            case 7:{
                cout<<"Enter value to delete:";
                cin>>val;
                deleteSpecific(val);
                break;
            }
            case 8:{
                cout<<"Enter value to search:";
                cin>>val;
                search(val);
                break;
            }
            case 9:{
                display();
                break;
            }
            case 10:{
                cout<<"Exiting program"<<endl;
                break;
            }
            default:{
                cout<<"Invalid choice"<<endl;
            }
        }
    }while(ch!=10);

    return 0;
}
