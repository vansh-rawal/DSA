// Finding middle of Linked List

#include <iostream>
using namespace std;

struct node{
    int data;
    node* next;
}*head=NULL;

void insertAtEnd(int val){
    node* p=new node;
    p->data=val;
    p->next=NULL;
    if(head==NULL){
        head=p;
    }else{
        node* temp=head;
        while(temp->next!=NULL){
            temp=temp->next;
        }
        temp->next=p;
    }
}

void display(){
    if(head==NULL){
        cout<<"List is empty"<<endl;
    }else{
        node* temp=head;
        while(temp!=NULL){
            cout<<temp->data;
            if(temp->next!=NULL){
                cout<<"->";
            }
            temp=temp->next;
        }
        cout<<endl;
    }
}

void findMiddle(){
    if(head==NULL){
        cout<<"List is empty"<<endl;
        return;
    }
    node* slow=head;
    node* fast=head;
    while(fast!=NULL && fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
    }
    cout<<"Middle element:"<<slow->data<<endl;
}

int main(){
    int n,val;
    cout<<"Enter number of elements:";
    cin>>n;
    cout<<"Enter elements of Linked List:"<<endl;
    for(int i=0;i<n;i++){
        cin>>val;
        insertAtEnd(val);
    }

    cout<<"Linked List:";
    display();

    findMiddle();

    return 0;
}
